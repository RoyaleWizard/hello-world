#include<stdio.h>
#define LAYERS 10
#define SEND 0
void dec_to_bin(unsigned long a)
{
    unsigned long tmp=1;
        while(a>=2*tmp) tmp=tmp*2;
    do
    {
        if(a>=tmp)
        {
            printf("1");
            a=a-tmp;
        }else
            printf("0");
        tmp=tmp/2;
    }while(tmp!=0);
    printf("\n");
}
void dec_to_hex(unsigned long a)
{
    unsigned long tmp=1,rakum;
        while(a>=16*tmp) tmp*=16;
    do
    {
        for(rakum=0;rakum<15;rakum++)
        {
          if(a<(rakum+1)*tmp) break;
        }//finishes with the biggest rakum*tmp that fits in a
        switch(rakum)
        {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:printf("%lu",rakum); break;
        case 10:printf("A"); break;
        case 11:printf("B");break;
        case 12:printf("C"); break;
        case 13:printf("D"); break;
        case 14:printf("E"); break;
        case 15:printf("F"); break;
        default: printf("error"); break;
        }
        a-=rakum*tmp;
        tmp/=16;
    }while(tmp!=0);
    printf("\n");
}
void print_space(int n)
{
    int i=1;
    printf("|");
    while(i<n)
    {
        if(i!=n-1)
        printf("\t|");
        else
        printf("_______.");
        i++;
    }
}
void full_tree0(unsigned long first,int layer,void (*f)(unsigned long))
{
    static int depth=1;
    print_space(layer);
    printf("%3d %2d ",depth,layer);
    if(f==dec_to_bin) printf("%5lu ",first);
    f(first);
    depth++;
    if(layer<LAYERS)
    {
        full_tree0(2*first,layer+1,f);
        if((double)(first-1)/3-(first-1)/3==0 && first!=1 && first!=4)
            full_tree0((first-1)/3,layer+1,f);
    }
}
void full_tree(unsigned long first,void (*f)(unsigned long))
{
    if(first==0) return;
    full_tree0(first,1,f);
}
void tree0(unsigned long a,int layer,void (*f)(unsigned long))
{
    do
    {
    printf("%2d ",layer);

    f(a);
    if(a%2==0)
       a/=2;
    else
        a=3*a+1;
    layer++;
    }while(a!=1);
    printf("%2d ",layer);

    f(a);
}
void tree(unsigned long a,void (*f)(unsigned long))
{
    tree0(a,1,f);
}
int main()
{
    #if SEND
    printf("the first number is how deep down second in how far from the edge\nthird is the number forth is the number in binary or hexadecimal\n");
    printf("the tree is read from down right to top left where the following number is n/2\nif n%2=0 otherwise 3n+1\n");
    #endif //SEND
    unsigned long a=1;
    for(int i=0;i<10;i++)
    {
        tree(a,dec_to_bin);
        a=4*a+1;
    }


    return 0;
}
